files:
  # Hook into appdeploy/post
  "/opt/elasticbeanstalk/hooks/appdeploy/post/50_ebcert.sh":
    mode: "000744"
    owner: root
    group: root
    content: |
      #!/bin/bash

      echo "Start cert.sh via appdeploy/post hook (50)"
      /opt/ebcert/cert.sh

  # Hook into configdeploy/post
  "/opt/elasticbeanstalk/hooks/configdeploy/post/50_ebcert.sh":
    mode: "000744"
    owner: root
    group: root
    content: |
      #!/bin/bash

      echo "Start cert.sh via configdeploy/post hook (50)"
      /opt/ebcert/cert.sh

  # Do the dirty work
  "/opt/ebcert/cert.sh":
    mode: "000744"
    owner: root
    group: root
    content: |
      #!/bin/bash

      echo -e "\n***** /EBCERT/CERT.SH *****\n"

      MIGRATE=false
      while getopts ":m:" optname
        do
          case "$optname" in
            "f") MIGRATE=true;;
            "?") echo "Unknown option $optname";;
            *)
              # Should not occur
              echo "Unknown error while processing options"
              ;;
          esac
      done

      echo "Gather environment variables"
      CERT_EMAIL=$(/opt/elasticbeanstalk/bin/get-config environment -k CERT_EMAIL)
      CERT_DOMAIN=$(/opt/elasticbeanstalk/bin/get-config environment -k CERT_DOMAIN)
      CERT_PRODUCTION=$(/opt/elasticbeanstalk/bin/get-config environment -k CERT_PRODUCTION)

      # If CERT_PRODUCTION is true and the current certificate uses the staging server, force MIGRATE=true
      if [ $(grep -ic "true" <<< $CERT_PRODUCTION) -gt 0 -a $(grep -ic "staging" /etc/letsencrypt/renewal/ebcert.conf) -gt 0 ]
        then
          echo "CERT_PRODUCTION true and current certificate uses staging server, forcing MIGRATE"
          MIGRATE=true
        fi

      # Remove AWS default config, which will present serving /.well-known/acme-challenge for certification
      # Lifted from https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/nodejs-platform-proxy.html

      rm -f /tmp/deployment/config/#etc#nginx#conf.d#00_elastic_beanstalk_proxy.conf /etc/nginx/conf.d/00_elastic_beanstalk_proxy.conf

      echo "Download certbot if necessary"
      if ! test -x /certbot-auto
        then
          echo "Certbot not found, downloading"
          wget https://dl.eff.org/certbot-auto && chmod a+x certbot-auto
        else
          echo "Certbot found, skipping download"
        fi

      echo "Booting nginx"
      # Boot or reload nginx
      if ! initctl start nginx
        then
          service nginx reload
        fi

      if [ -x /certbot-auto -a "$(initctl status nginx | grep running)" ]
        then
          echo "Attempting certification with email $CERT_EMAIL and domain(s) $CERT_DOMAIN"

          if test "$MIGRATE" = true
            then
              echo "MIGRATE true, forcing cert renewal in production environment"
              /certbot-auto certonly --debug --force-renewal --non-interactive --email "$CERT_EMAIL" --domain "$CERT_DOMAIN" --cert-name ebcert --agree-tos --keep-until-expiring --authenticator webroot --webroot-path /var/www/
            else
              if grep -ic "true" <<< $CERT_PRODUCTION
                then
                  echo "CERT_PRODUCTION true, getting production cert"
                  /certbot-auto certonly --debug --non-interactive --email "$CERT_EMAIL" --domain "$CERT_DOMAIN" --cert-name ebcert --agree-tos --keep-until-expiring --authenticator webroot --webroot-path /var/www/
                else
                  echo "CERT_PRODUCTION false, retrieve staging cert"
                  /certbot-auto certonly --debug --staging --non-interactive --email "$CERT_EMAIL" --domain "$CERT_DOMAIN" --cert-name ebcert --agree-tos --keep-until-expiring --authenticator webroot --webroot-path /var/www/
                fi
            fi
        else
          echo "Cannot certify without certbot and nginx running"
        fi

      # Generate DH params
      # Activate https.conf (serve SSL)
      # Activate renewal cron

      echo "Attempt to activate SSL"
      if [ $(ls -l /etc/letsencrypt/live/ebcert | wc -l) -gt 0 ]
        then
          echo "Certificates found in /etc/letsencrypt/live/ebcert"
          echo "Generating DH params, setting SSL, and activating renewal cron"
          # See https://serverfault.com/a/788438
          touch /etc/letsencrypt/live/ebcert/.rnd
          export RANDFILE=/etc/letsencrypt/live/ebcert/.rnd
          openssl dhparam -out /etc/letsencrypt/live/ebcert/dhparam.pem 2048
          mv /etc/nginx/conf.d/https.pre /etc/nginx/conf.d/https.conf
          initctl reload nginx

          # Create certificate renewal cronjob
          if ! test -e /etc/cron.d/ebcert_renew
            then
              # Randomize to reduce cron overlap
              minute=$((RANDOM % 60))
              hour=$((RANDOM % 12))
              touch /etc/cron.d/ebcert_renew
              chmod 644 /etc/cron.d/ebcert_renew
              echo "$minute $hour,$(($hour + 12)) * * * root /certbot-auto renew --webroot --webroot-path /var/www/" > /etc/cron.d/ebcert_renew

              # Format minutes for humans
              if [ $minute -lt 10 ]
                then
                  minute="0$minute"
                fi

              echo "Renewal cron running ${hour}:${minute} and $(($hour + 12)):${minute}"
            fi

        else
          echo "No certificates found in /etc/letsencrypt/live/ebcert"
          echo "Unable to activate SSL"
        fi

      echo -e "\n***** /EBCERT/CERT.SH *****\n"

packages:
  # Certbot is packaged in EPEL (Extra Packages for Enterprise Linux).
  # To use Certbot, you must first enable the EPEL repository (epel-release).
  yum:
    epel-release: []
